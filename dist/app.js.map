{"version":3,"sources":["../app.js"],"names":["CONFIG","require","ConnectionQueue","Authentication","WebSocketServer","Server","wss","port","websocketPort","path","express","bodyParser","session","app","use","json","urlencoded","extended","index","secret","clientSockets","authenticator","server","listen","serverPort","host","address","console","log","on","ws","req","url_parts","parse","url","verify","query","id","sig","then","match","addWSConnection","userId","close","webSocketConnection","closeReason","description","set","join","__dirname","post","res","user_id","params","client_id","hasWSConnection","clientWS","getWSConnection","send","JSON","stringify","x","y","sendStatus","get","setHeader","encrypt","module","exports"],"mappings":"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","file":"app.js","sourcesContent":["const CONFIG  = require('./Config')\nvar ConnectionQueue = require('./WSConnectionQueue/ConnectionQueue')\nvar Authentication = require('./authenticate/authentication')\nvar WebSocketServer = require('ws').Server\n    , wss = new WebSocketServer({ port: CONFIG.websocketPort});\n\nvar path = require('path');\nvar express = require('express');\nvar bodyParser = require('body-parser');\nvar session = require('express-session');\nvar app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\nvar index = require('./routes/index');\napp.use(session({secret: 'secret1234'}));\n\n\nvar clientSockets = new ConnectionQueue();\nvar authenticator = new Authentication();\nvar server = app.listen(CONFIG.serverPort, function () {\n    var host = CONFIG.host\n    var port = server.address().port\n    console.log(\"Websocket event broadcaster REST API listening on http://%s:%s\", host, port)\n});\n\n\nwss.on('connection', function(ws,req) {\n\n    var url_parts = require('url').parse(req.url,true);\n    authenticator.verify(url_parts.query.id, url_parts.query.sig)\n        .then(function (match) {\n            if(match)\n                clientSockets.addWSConnection(url_parts.query.id, url_parts.query.userId, ws);\n            else\n                ws.close();\n    });\n\n});\n\nwss.on('close', function (webSocketConnection, closeReason, description) {\n   console.log(closeReason+' closing.')\n});\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'hbs');\n\n\napp.post('/notify/:client_id/:user_id/update', function (req, res) {\n\n    var user_id = req.params.user_id;\n    var client_id = req.params.client_id;\n    if(clientSockets.hasWSConnection(client_id, user_id)){\n        var clientWS = clientSockets.getWSConnection(client_id, user_id);\n        clientWS.send(JSON.stringify({ x: 5, y: 6 }));\n    }\n\n    res.sendStatus(200);\n});\n\napp.get('/test',function (req, res) {\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    var sig = authenticator.encrypt('a8LiszAGwpNMsWIk', 'fI0vFE38QGzz8EEE');\n    res.send(sig);\n});\n\napp.use('/',index);\nmodule.exports = app;\n"]}