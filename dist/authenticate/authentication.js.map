{"version":3,"sources":["../../authenticate/authentication.js"],"names":["ClientAccountRepository","require","CryptoJS","bcrypt","clientAccountRepository","Authentication","clientId","signature","isMatch","getAccount","then","clientAccount","key","secret","parsedWordArray","enc","Base64","parse","parsedStr","toString","Utf8","bytes","AES","decrypt","plaintext","console","log","email","password","result","getAccountByEmail","account","compareSync","module","exports"],"mappings":";;;;;;AAAA,IAAIA,0BAA0BC,QAAQ,uCAAR,CAA9B;AACA,IAAIC,WAAWD,QAAQ,WAAR,CAAf;AACA,IAAME,SAASF,QAAQ,QAAR,CAAf;;AAEA,IAAIG,0BAA0B,IAAIJ,uBAAJ,EAA9B;;IACMK,c;AAEF,8BAAa;AAAA;AAEZ;;;;+BAEMC,Q,EAAUC,S,EAAU;AACvB,gBAAIC,UAAUJ,wBAAwBK,UAAxB,CAAmCH,QAAnC,EACTI,IADS,CACH,UAACC,aAAD,EAAmB;AACtB,oBAAGA,iBAAiB,IAApB,EACI;AACR,oBAAIC,MAAMD,cAAcE,MAAxB;AACA,oBAAIC,kBAAkBZ,SAASa,GAAT,CAAaC,MAAb,CAAoBC,KAApB,CAA0BV,SAA1B,CAAtB;AACA,oBAAIW,YAAYJ,gBAAgBK,QAAhB,CAAyBjB,SAASa,GAAT,CAAaK,IAAtC,CAAhB;AACA,oBAAIC,QAASnB,SAASoB,GAAT,CAAaC,OAAb,CAAqBL,SAArB,EAAgCN,GAAhC,CAAb;AACA,oBAAIY,YAAYH,MAAMF,QAAN,CAAejB,SAASa,GAAT,CAAaK,IAA5B,CAAhB;AACAK,wBAAQC,GAAR,CAAYF,SAAZ;AACA,uBAAOA,aAAalB,QAApB;AACH,aAXa,CAAd;;AAaA,mBAAOE,OAAP;AACH;;;8BAEKmB,K,EAAOC,Q,EAAS;AAClB,gBAAIC,SAASzB,wBAAwB0B,iBAAxB,CAA0CH,KAA1C,EACRjB,IADQ,CACH,UAACqB,OAAD,EAAY;AAClB,oBAAG5B,OAAO6B,WAAP,CAAmBJ,QAAnB,EAA6BG,QAAQH,QAArC,CAAH,EAAkD;AAC9C,2BAAOD,KAAP;AACH;AACD,uBAAO,IAAP;AACH,aANY,CAAb;;AAQA,mBAAOE,MAAP;AACH;;;;;;AAGLI,OAAOC,OAAP,GAAiB7B,cAAjB","file":"authentication.js","sourcesContent":["var ClientAccountRepository = require('../Repository/ClientAccountRepository')\nvar CryptoJS = require(\"crypto-js\");\nconst bcrypt = require('bcrypt');\n\nvar clientAccountRepository = new ClientAccountRepository;\nclass Authentication{\n\n    constructor(){\n\n    }\n\n    verify(clientId, signature){\n        var isMatch = clientAccountRepository.getAccount(clientId)\n            .then( (clientAccount) => {\n                if(clientAccount == null)\n                    return;\n            var key = clientAccount.secret;\n            var parsedWordArray = CryptoJS.enc.Base64.parse(signature);\n            var parsedStr = parsedWordArray.toString(CryptoJS.enc.Utf8);\n            var bytes  = CryptoJS.AES.decrypt(parsedStr, key);\n            var plaintext = bytes.toString(CryptoJS.enc.Utf8);\n            console.log(plaintext);\n            return plaintext == clientId;\n        });\n\n        return isMatch;\n    }\n\n    login(email, password){\n        let result = clientAccountRepository.getAccountByEmail(email)\n            .then((account) =>{\n            if(bcrypt.compareSync(password, account.password)){\n                return email;\n            }\n            return null;\n        });\n\n        return result;\n    }\n}\n\nmodule.exports = Authentication;"]}