{"version":3,"sources":["../../Repository/ClientAccountRepository.js"],"names":["DataStoreFactory","require","CONFIG","bcrypt","rand","dataStore","getDataStore","datastore","ClientAccountRepository","email","account","getAccountByEmail","then","data","clientId","getAccountById","password","passwordHash","hashSync","clientID","generateKey","secret","createAccount","catch","error","console","log","module","exports"],"mappings":";;;;;;AAAA,IAAMA,mBAAmBC,QAAQ,+BAAR,CAAzB;AACA,IAAMC,SAAUD,QAAQ,WAAR,CAAhB;AACA,IAAME,SAASF,QAAQ,QAAR,CAAf;AACA,IAAIG,OAAOH,QAAQ,cAAR,CAAX;;AAIA,IAAII,YAAY,IAAIL,gBAAJ,GAAuBM,YAAvB,CAAoCJ,OAAOK,SAA3C,CAAhB;;IACMC,uB;;;;;;;0CAEgBC,K,EAAM;AACpB,gBAAIC,UAAWL,UAAUM,iBAAV,CAA4BF,KAA5B,EACVG,IADU,CACL,UAAUC,IAAV,EAAgB;AAClB,uBAAOA,IAAP;AACH,aAHU,CAAf;AAIA,mBAAOH,OAAP;AACH;;;mCAEUI,Q,EAAS;AAChB,gBAAIJ,UAAWL,UAAUU,cAAV,CAAyBD,QAAzB,EACVF,IADU,CACL,UAAUC,IAAV,EAAgB;AACtB,uBAAOA,IAAP;AACH,aAHc,CAAf;AAIA,mBAAOH,OAAP;AACH;;;sCAEaD,K,EAAOO,Q,EAAS;AAC1B,gBAAIC,eAAed,OAAOe,QAAP,CAAgBF,QAAhB,EAA0B,EAA1B,CAAnB;AACA,gBAAIG,WAAWf,KAAKgB,WAAL,EAAf;AACA,gBAAIC,SAASjB,KAAKgB,WAAL,EAAb;AACA,mBAAOf,UAAUiB,aAAV,CAAwBb,KAAxB,EAA+BQ,YAA/B,EAA6CE,QAA7C,EAAuDE,MAAvD,EAA+DT,IAA/D,CAAoE,UAAUC,IAAV,EAAgB;AACvF,uBAAOA,IAAP;AACH,aAFM,EAEJU,KAFI,CAEE,UAACC,KAAD,EAAW;AAChBC,wBAAQC,GAAR,CAAYF,KAAZ;AACH,aAJM,CAAP;AAKA;AACH;;;;;;AAELG,OAAOC,OAAP,GAAiBpB,uBAAjB","file":"ClientAccountRepository.js","sourcesContent":["const DataStoreFactory = require('../DataStore/DataStoreFactory');\nconst CONFIG  = require('../Config');\nconst bcrypt = require('bcrypt');\nvar rand = require(\"generate-key\");\n\n\n\nvar dataStore = new DataStoreFactory().getDataStore(CONFIG.datastore)\nclass ClientAccountRepository{\n\n    getAccountByEmail(email){\n        var account =  dataStore.getAccountByEmail(email)\n            .then(function (data) {\n                return data;\n            });\n        return account;\n    }\n\n    getAccount(clientId){\n        var account =  dataStore.getAccountById(clientId)\n            .then(function (data) {\n            return data;\n        });\n        return account;\n    }\n\n    createAccount(email, password){\n        let passwordHash = bcrypt.hashSync(password, 10);\n        let clientID = rand.generateKey();\n        let secret = rand.generateKey();\n        return dataStore.createAccount(email, passwordHash, clientID, secret).then(function (data) {\n            return data;\n        }).catch((error) => {\n            console.log(error)\n        });\n        ;\n    }\n}\nmodule.exports = ClientAccountRepository;"]}