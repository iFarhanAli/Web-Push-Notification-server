{"version":3,"sources":["../../DataStore/InMemoryDataStore.js"],"names":["fs","require","path","InMemoryDataStore","email","password","data","readFileSync","err","Promise","reject","arrayOfObjects","JSON","parse","client","users","filter","elem","length","resolve","id","clientId","clientID","secret","matchingEmails","push","writeFile","stringify","module","exports"],"mappings":";;;;;;AAAA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;;IAEME,iB;;;;;;;2CAEiBC,K,EAAMC,Q,EAAS,CAEjC;;;0CAEiBD,K,EAAM;AACpB,gBAAIE,OAAON,GAAGO,YAAH,CAAgB,cAAhB,EAAgC,OAAhC,EAAyC,UAAUC,GAAV,EAAeF,IAAf,EAAqB;AACrE,oBAAIE,GAAJ,EAAS,OAAOC,QAAQC,MAAR,CAAe,qBAAf,EAAqCF,GAArC,CAAP;AACZ,aAFU,CAAX;AAGA,gBAAIG,iBAAiBC,KAAKC,KAAL,CAAWP,IAAX,CAArB;;AAEA,gBAAIQ,SAASH,eAAeI,KAAf,CAAqBC,MAArB,CAA4B,UAACC,IAAD;AAAA,uBAAUA,KAAKb,KAAL,KAAeA,KAAzB;AAAA,aAA5B,CAAb;;AAEA,gBAAGU,OAAOI,MAAP,IAAiB,CAApB,EACI,OAAOT,QAAQC,MAAR,CAAe,yBAAf,CAAP;AACJ,mBAAOD,QAAQU,OAAR,CAAgBL,OAAO,CAAP,CAAhB,CAAP;AACH;;;uCACcM,E,EAAI;AACf,gBAAId,OAAON,GAAGO,YAAH,CAAgB,cAAhB,EAAgC,OAAhC,EAAyC,UAAUC,GAAV,EAAeF,IAAf,EAAqB;AACrE,oBAAIE,GAAJ,EAAS,OAAOC,QAAQC,MAAR,CAAe,qBAAf,EAAqCF,GAArC,CAAP;AACZ,aAFU,CAAX;AAGA,gBAAIG,iBAAiBC,KAAKC,KAAL,CAAWP,IAAX,CAArB;;AAEA,gBAAIQ,SAASH,eAAeI,KAAf,CAAqBC,MAArB,CAA4B,UAACC,IAAD;AAAA,uBAAUA,KAAKI,QAAL,KAAkBD,EAA5B;AAAA,aAA5B,CAAb;AACA,gBAAGN,OAAOI,MAAP,IAAiB,CAApB,EACI,OAAOT,QAAQC,MAAR,CAAe,yBAAf,CAAP;AACJ,mBAAOD,QAAQU,OAAR,CAAgBL,OAAO,CAAP,CAAhB,CAAP;AACH;;;sCAEaV,K,EAAOC,Q,EAAUiB,Q,EAAUC,M,EAAQ;;AAE7C,gBAAIjB,OAAON,GAAGO,YAAH,CAAgB,cAAhB,EAAgC,OAAhC,EAAyC,UAAUC,GAAV,EAAeF,IAAf,EAAqB;AACrE,oBAAIE,GAAJ,EAAS,OAAOC,QAAQC,MAAR,CAAe,qBAAf,EAAqCF,GAArC,CAAP;AACZ,aAFU,CAAX;AAGA,gBAAIG,iBAAiBC,KAAKC,KAAL,CAAWP,IAAX,CAArB;AACA,gBAAIkB,iBAAiBb,eAAeI,KAAf,CAAqBC,MAArB,CAA4B,UAACC,IAAD;AAAA,uBAAUA,KAAKb,KAAL,KAAeA,KAAzB;AAAA,aAA5B,CAArB;AACA,gBAAIoB,eAAeN,MAAnB,EAA2B;AACvB,uBAAOT,QAAQC,MAAR,CAAe,qBAAf,CAAP;AACH;AACDC,2BAAeI,KAAf,CAAqBU,IAArB,CAA0B;AACtBrB,uBAAOA,KADe;AAEtBC,0BAAUA,QAFY;AAGtBgB,0BAAUC,QAHY;AAItBC,wBAAQA;AAJc,aAA1B;;AAOAvB,eAAG0B,SAAH,CAAa,cAAb,EAA6Bd,KAAKe,SAAL,CAAehB,cAAf,CAA7B,EAA6D,OAA7D,EAAsE,UAAUH,GAAV,EAAe;AACjF,oBAAIA,GAAJ,EAAS,OAAOC,QAAQC,MAAR,CAAe,kBAAf,EAAkCF,GAAlC,CAAP;AACZ,aAFD;AAGA,mBAAOC,QAAQU,OAAR,CAAgBf,KAAhB,CAAP;AAEH;;;;;;AAGLwB,OAAOC,OAAP,GAAiB1B,iBAAjB","file":"InMemoryDataStore.js","sourcesContent":["var fs = require('fs')\nvar path = require('path');\n\nclass InMemoryDataStore {\n\n    verifyUserPassword(email,password){\n\n    }\n\n    getAccountByEmail(email){\n        let data = fs.readFileSync('./users.json', 'utf-8', function (err, data) {\n            if (err) return Promise.reject('failed to read file',err);\n        });\n        let arrayOfObjects = JSON.parse(data);\n\n        let client = arrayOfObjects.users.filter((elem) => elem.email === email);\n        \n        if(client.length == 0)\n            return Promise.reject('Could not find account.')\n        return Promise.resolve(client[0]);\n    }\n    getAccountById(id) {\n        let data = fs.readFileSync('./users.json', 'utf-8', function (err, data) {\n            if (err) return Promise.reject('failed to read file',err);\n        });\n        let arrayOfObjects = JSON.parse(data);\n\n        let client = arrayOfObjects.users.filter((elem) => elem.clientId === id);\n        if(client.length == 0)\n            return Promise.reject('Could not find account.')\n        return Promise.resolve(client[0]);\n    }\n\n    createAccount(email, password, clientID, secret) {\n\n        let data = fs.readFileSync('./users.json', 'utf-8', function (err, data) {\n            if (err) return Promise.reject('failed to read file',err);\n        });\n        let arrayOfObjects = JSON.parse(data);\n        let matchingEmails = arrayOfObjects.users.filter((elem) => elem.email === email);\n        if (matchingEmails.length) {\n            return Promise.reject('email already exist');\n        }\n        arrayOfObjects.users.push({\n            email: email,\n            password: password,\n            clientId: clientID,\n            secret: secret\n        });\n\n        fs.writeFile('./users.json', JSON.stringify(arrayOfObjects), 'utf-8', function (err) {\n            if (err) return Promise.reject('failed to write.',err);\n        });\n        return Promise.resolve(email);\n\n    }\n}\n\nmodule.exports = InMemoryDataStore;"]}